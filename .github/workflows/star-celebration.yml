name: Stargazer Celebration

on:
  watch:
    types: [started]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  celebrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract event data (pure Python)
        id: evt
        run: |
          python3 - <<'PY'
          import json, os, urllib.request, sys

          event_path = os.environ.get("GITHUB_EVENT_PATH")
          actor = os.environ.get("GITHUB_ACTOR", "someone")
          repo  = os.environ.get("GITHUB_REPOSITORY")

          login = actor  # fallback default
          try:
            with open(event_path, "r", encoding="utf-8") as f:
              data = json.load(f)
            # for 'watch' events
            login = (data.get("sender", {}) or {}).get("login") or actor
          except Exception:
            pass

          # get current star count from API
          try:
            with urllib.request.urlopen(f"https://api.github.com/repos/{repo}") as resp:
              repo_info = json.load(resp)
              stars = int(repo_info.get("stargazers_count", 0))
          except Exception:
            stars = 0

          # write outputs
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as out:
            out.write(f"login={login}\n")
            out.write(f"stars={stars}\n")
          PY

      - name: Update README (badge wall - full list)
        env:
          REPO: ${{ github.repository }}
        run: |
          python3 - <<'PY'
          import os, urllib.request, json, pathlib, re, html, random

          repo = os.environ["REPO"]
          print("[dbg] Fetching full stargazers list...")

          req = urllib.request.Request(
              f"https://api.github.com/repos/{repo}/stargazers",
              headers={"Accept": "application/vnd.github.v3+json"}
          )
          with urllib.request.urlopen(req) as resp:
            data = json.load(resp)

          # turn logins into badges
          colors = ["181717","0E75B6","2E7D32","6A1B9A","1565C0","D81B60","F57C00","455A64"]
          badges = []
          for user in data:
            login = user["login"]
            color = random.choice(colors)
            badge = (
              f'<a href="https://github.com/{html.escape(login)}" title="@{html.escape(login)}">'
              f'<img src="https://img.shields.io/badge/@{html.escape(login)}-{color}?style=for-the-badge&logo=github&logoColor=white" /></a>'
            )
            badges.append(badge)

          p = pathlib.Path("README.md")
          content = p.read_text(encoding="utf-8")

          start = "<!-- STARS-WALL:START -->"
          end = "<!-- STARS-WALL:END -->"
          pattern = re.compile(re.escape(start) + r"(.*?)" + re.escape(end), re.S)

          wall = " ".join(badges[:100])  # keep first 100

          def replace(m):
            return f"{start}\n{wall}\n{end}"

          updated = pattern.sub(replace, content)
          p.write_text(updated, encoding="utf-8")

          print("[dbg] Wall updated successfully âœ…")
          PY
